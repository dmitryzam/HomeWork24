#include<iostream>
#include<cstdlib>
#include<ctime>

// Прототип функции по заполнению массива случайными числами:
template<typename T>
void fill_arr(T arr[], const int length, int left, int right);
// Прототип функции по выводу массива в консоль:
template<typename T>
void show_arr(T arr[], const int length);
// Прототип функции Задачи 1:
void plus_arr(int*& arr, int* arr1, int length1, int* arr2, int length2);
// Прототип функции Задачи 2:
void resize_arr(int*& arr, int first_length, int end_length);

int main() {
	setlocale(LC_ALL, "RU");
	int n, m;
	
	// Задача 1. Даны два динамических массива A[n] и B[m]. Необходимо создать динамический массив C[n + m],
	// который состоит из элементов массивов A и B. После создания массива C массивы A и B должны быть удалены.
	std::cout << "Задача 1. Создание общего динамического массива из двух.\n";
	std::cout << "Введите длины массивов А и В -> ";
	std::cin >> n >> m;
	int* A = new int[n];		// создаем динамический массив с длиной n.
	int* B = new int[m];		// создаем динамический массив с длиной m.
	fill_arr(A, n, 0, 11);		// вызываем функцию по заполнению массива в диапазоне 0-10.
	std::cout << "Массив А:\n";
	show_arr(A, n);
	fill_arr(B, m, -10, 1);		// вызываем функцию по заполнению массива в диапазоне -10-0.
	std::cout << "Массив В:\n";
	show_arr(B, m);
	int* C = new int[n + m];	// создаем динамический массив с длиной n+m.	
	plus_arr(C, A, n, B, m);	// вызываем функцию по слиянию двух массивов в один.
	std::cout << "Массив C:\n";
	show_arr(C, n + m);
	
	
	// Задача 2. Создайте функцию resize_arr, которая принимает динамический массив, текущую длину массива
	// и новую длину массива. Переданный массив меняет свою изначальную длину на новую.
	std::cout << "Задача 2. Изменение длины динамического массива.\n";
	int* arr1 = new int[5];		// создаем динамический массив с длиной 5.
	fill_arr(arr1, 5, 0, 10);	// вызываем функцию по заполнению массива в диапазоне 0-9.
	std::cout << "Изначальный массив, состоящий из 5-ти элементов:\n";
	show_arr(arr1, 5);
	std::cout << "Введите необходимую длину массива -> ";
	std::cin >> n;
	// вызываем функцию по изменению длины изначального массива,
	//  передавая ей ссылку на массив, его длину и длину, на которую необходимо преобразовать.
	resize_arr(arr1, 5, n);
	if (n > 0)
		show_arr(arr1, n);
	else
		std::cout << "Ошибка ввода!" << std::endl; // если введено отрицательное число, то ошибка ввода.

	return 0;
}

// Функция по заполнению массива случайными числами:
template<typename T>
void fill_arr(T arr[], const int length, int left, int right) {
	srand(time(NULL));								// генератор случайных чисел.
	for (int i = 0; i < length; i++)				
		arr[i] = rand() % (right - left) + left;	// присваиваем каждому элементу в массиве случайное число в диапазоне (left-right).
}
// Функция по выводу массива в консоль:
template<typename T>
void show_arr(T arr[], const int length) {
	std::cout << "{ ";
	for (int i = 0; i < length; i++)
		std::cout << arr[i] << ", ";	// выводим каждый элемент в массиве.
	std::cout << "\b\b }" << std::endl;
}
// Функция Задачи 1:
// передаем в функцию ссылку итогового массива, указатель 1-го массива и его длину, указатель 2-го массива и его длину.
void plus_arr(int*& arr, int* arr1, int length1, int* arr2, int length2) {
	for (int i = 0; i < length1; i++)
		arr[i] = arr1[i];				// присваиваем значения элементов 1-го массива к итоговому.
	for (int i = 0; i < length1 + length2; i++)
		arr[length1 + i] = arr2[i];		// присваиваем значения элементов 2-го массива к итоговому, но со сдвигом на длину 1-го массива.
	delete[] arr1;		// освобождаем динамическую память от 1-го массива.
	delete[] arr2;		// освобождаем динамическую память от 2-го массива.
}

// Функция Задачи 2:
void resize_arr(int*& arr, int first_length, int end_length) {
	if (end_length <= 0 || first_length == end_length)	// защита от лишних действий.
		return;
	if (first_length < end_length) {	// если конечная длина (end_length) больше, то переход на строку 90, иначе на строку 97.
		int* tmp = new int[end_length] {};	// создаем динамич. массив с новой длиной массива и обнуляем все его элементы.
		for (int i = 0; i < first_length; i++)
			tmp[i] = arr[i];			// присваиваем значения элементов исходного массива к промежуточному.
		delete[] arr;					// освобождаем память изначального массива.
		arr = tmp;						// перенаправляем указатель arr на новый динамич. массив.
	}
	else {
		int* tmp = new int[end_length];	// создаем динамич. массив с новой длиной массива.
		for (int i = 0; i < end_length; i++)
			tmp[i] = arr[i];			// присваиваем значения элементов исходного массива к промежуточному.
		delete[] arr;					// освобождаем память изначального массива.
		arr = tmp;						// перенаправляем указатель arr на новый динамич. массив.
	}
}